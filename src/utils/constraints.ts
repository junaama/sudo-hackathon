export const CONSTRAINTS = [
    "ArrowSumConstraint",
    "BetweenLineConstraint",
    "ChessConstraint",
    "CloneConstraint",
    "Constraint",
    "DiagonalNegativeGroupConstraint",
    "DiagonalNonconsecutiveConstraint",
    "DiagonalPositiveGroupConstraint",
    "DifferenceConstraint",
    "DisjointGroupsConstraint",
    "DoubleArrowConstraint",
    "EntropicLineConstraint",
    "EqualSumsConstraint",
    "EvenConstraint",
    "ExtraRegionConstraint",
    "IndexerConstraint",
    "KillerCageConstraint",
    "KingConstraint",
    "KnightConstraint",
    "KnightmareConstraint",
    "LittleKillerConstraint",
    "MaximumConstraint",
    "MinimumConstraint",
    "ModularLineConstraint",
    "MultiSumKillerCageConstraint",
    "NabnerConstraint",
    "OddConstraint",
    "OrthogonalValueConstraint",
    "PalindromeConstraint",
    "QuadrupleConstraint",
    "RatioConstraint",
    "RegionSumLinesConstraint",
    "RenbanConstraint",
    "SandwichConstraint",
    "SelfTaxicabConstraint",
    "SkyscraperConstraint",
    "SumConstraint",
    "TaxicabConstraint",
    "ThermometerConstraint",
    "WhispersConstraint",
    "XSumConstraint",
    "ZipperLineConstraint"
]

export const ConstraintDefinitions = {
    "ArrowSumConstraint": `Enforces that the sum of digits along an arrow's path equals the value in the arrow's base cell. For example, if an arrow points from cell A to cells B and C, then $$ A = B + C $$. This is central to **Arrow Sudoku** puzzles`,
    "BetweenLineConstraint": `Requires numbers on a line to be strictly between the two endpoint values. For example, if a line connects cells with 2 and 8, intermediate cells must contain numbers 3–7`,
    "ChessConstraint": `A general term for constraints mimicking chess piece movements. Subtypes include **KnightConstraint** and **KingConstraint**, which restrict adjacent digits based on how these pieces move.`,
    "CloneConstraint": `Mandates that pairs of cells (clones) contain identical numbers, often symmetrically placed.`,
    "Constraint": `A general, undefined constraint type. This is often a base for other specific constraints.`,
    "DiagonalNegativeGroupConstraint": `Ensures that all numbers along a negative diagonal (top-right to bottom-left) form a valid set (1–9 with no repeats), similar to standard row/column rules.`,
    "DiagonalNonconsecutiveConstraint": `Prohibits consecutive numbers from being adjacent along diagonals.`,
    "DiagonalPositiveGroupConstraint": `Requires numbers along a positive diagonal (top-left to bottom-right) to form a valid set.`,
    "DifferenceConstraint": `Specifies that two cells must differ by a specific value (e.g., adjacent cells must differ by at least 3).`,
    "DisjointGroupsConstraint": `Extends the 3×3 box rule to additional disjoint regions, ensuring each region contains unique digits.`,
    "DoubleArrowConstraint": `Involves two interconnected arrows, often requiring the sum or difference of their paths to meet a condition.`,
    "EntropicLineConstraint": `All segments of a line must contain distinct numbers, even if the line is broken.`,
    "EqualSumsConstraint": `Different regions (e.g., rows, columns) must sum to the same total.`,
    "EvenConstraint": `Restricts cells to only even numbers.`,
    "ExtraRegionConstraint": `Adds non-standard regions (e.g., irregular shapes) that must obey the 1–9 uniqueness rule.`,
    "IndexerConstraint": `Defines relationships based on cell indices. For example, a clue might indicate the digit at a specific index within a line or region.`,
    "KillerCageConstraint": `Groups cells (cages) where numbers must sum to a given total without repeating.`,
    "KingConstraint": `Prohibits adjacent digits (including diagonally) from being the same or consecutive, mimicking a king’s move in chess.`,
    "KnightConstraint": `Prevents digits in cells a knight's move apart (two cells in one direction and one in the perpendicular direction) from being the same.`,
    "KnightmareConstraint": `A variation of the KnightConstraint, often with additional rules or applying to specific sets of cells.`,
    "LittleKillerConstraint": `Sums digits along diagonals indicated by arrows outside the grid. Unlike Killer Cages, digits along the diagonal can repeat if they are in different standard Sudoku regions (rows, columns, boxes).`,
    "MaximumConstraint": `A cell must be the highest value in its row, column, or a specified group of cells.`,
    "MinimumConstraint": `A cell must be the lowest value in its row, column, or a specified group of cells.`,
    "ModularLineConstraint": `Digits on a line follow a sequence with a fixed modulo (e.g., $$ x \equiv y+1 \mod 3 $$ for consecutive digits on the line).`,
    "MultiSumKillerCageConstraint": `Cages where numbers sum to multiple given totals, often distinguished by color or sub-regions within the cage.`,
    "NabnerConstraint": `Adjacent digits on a line must be non-consecutive (differ by more than 1).`,
    "OddConstraint": `Restricts cells to only odd numbers.`,
    "OrthogonalValueConstraint": `Constraints based on values in orthogonally adjacent cells, e.g., they must sum to a certain value or one must be double the other.`,
    "PalindromeConstraint": `Numbers on a line read the same forwards and backwards (e.g., 3-2-5-2-3).`,
    "QuadrupleConstraint": `Four cells around a corner must include specific digits, often indicated by clues at the intersection.`,
    "RatioConstraint": `Two cells must have a specific ratio (e.g., one digit is double another, 2:1).`,
    "RegionSumLinesConstraint": `Lines whose digits sum to values indicated in specific regions they pass through.`,
    "RenbanConstraint": `Digits on a line form a consecutive sequence, though their order may vary (e.g., 4-5-6 or 6-4-5).`,
    "SandwichConstraint": `The sum of digits between 1 and 9 in a row/column equals a clue outside the grid.`,
    "SelfTaxicabConstraint": `Digits on a line must sum to a value indicated by a clue at one of the line's endpoints or within the line itself.`,
    "SkyscraperConstraint": `Clues outside the grid indicate how many 'taller' digits are seen from that direction in a row/column, as if digits were building heights.`,
    "SumConstraint": `The sum of digits in a specific row, column, or region equals a clue outside the grid or within a designated cell.`,
    "TaxicabConstraint": `Digits on a line must sum to a clue, similar to SelfTaxicab but often with more complex pathing or multiple lines.`,
    "ThermometerConstraint": `Digits increase strictly along a thermometer-shaped line, starting from the bulb (the 'cold' end) to the tip (the 'hot' end).`,
    "WhispersConstraint": `Adjacent digits on a line must differ by at least 5.`,
    "XSumConstraint": `The sum of the first X digits in a row/column (where X is the digit in the first cell of that row/column from that direction) equals a clue outside the grid.`,
    "ZipperLineConstraint": `Pairs of cells equidistant from the center of a line sum to the same value, which is often the value in the very center cell of the line if it has one.`,
};

